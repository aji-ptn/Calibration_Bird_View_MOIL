from .ui_py.show_fov_ui import Ui_Dialog
from .view_additional_function import show_image_to_label, draw_point
from PyQt5.QtWidgets import QDialog
import numpy as np
import cv2


def draw_polygon(image, mapX, mapY):
    """
    Return image with a drawn polygon on it from mapX and mapY generated by maps anypoint or panorama.

    Args:
        image: Original image
        mapX: map image X from anypoint process
        mapY: map image Y from anypoint process

    return:
        image: map x, map y

    - Example:

    .. code-block:: python

        image = draw_polygon(image,mapX,mapY)
    """
    hi, wi = image.shape[:2]
    X1 = []
    Y1 = []
    X2 = []
    Y2 = []
    X3 = []
    Y3 = []
    X4 = []
    Y4 = []

    x = 0
    while x < wi:
        a = mapX[0,]
        b = mapY[0,]
        ee = mapX[-1,]
        f = mapY[-1,]

        if a[x] == 0. or b[x] == 0.:
            pass
        else:
            X1.append(a[x])
            Y1.append(b[x])

        if f[x] == 0. or ee[x] == 0.:
            pass
        else:
            Y3.append(f[x])
            X3.append(ee[x])
        x += 10

    y = 0
    while y < hi:
        c = mapX[:, 0]
        d = mapY[:, 0]
        g = mapX[:, -1]
        h = mapY[:, -1]

        # eliminate the value 0 for map X
        if d[y] == 0. or c[y] == 0.:  # or d[y] and c[y] == 0.0:
            pass
        else:
            Y2.append(d[y])
            X2.append(c[y])

        # eliminate the value 0 for map Y
        if h[y] == 0. or g[y] == 0.:
            pass
        else:
            Y4.append(h[y])
            X4.append(g[y])

        # render every 10 times, it will be like 1, 11, 21 and so on.
        y += 10

    r = np.array([X3, Y3])
    points3 = r.T.reshape((-1, 1, 2))

    # Draw polyline on original image
    cv2.polylines(image, np.int32([points3]), False, (0, 255, 0), 10)
    return image


class ShowRangeFOV(QDialog):
    def __init__(self, image_number, model, controller, show_to_window):
        super(ShowRangeFOV, self).__init__()
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.model = model
        self.controller = controller
        self.show_to_window = show_to_window
        self.image_number = image_number
        self.create_maps()
        self.ui.spinBox_alpha.valueChanged.connect(self.create_maps)

    def create_maps(self):
        icx = self.controller.moildev[self.image_number].icx()
        icy = self.controller.moildev[self.image_number].icy()
        alpha = self.ui.spinBox_alpha.value()
        rho = icy - round(self.controller.moildev[self.image_number].get_rho_from_alpha(alpha))
        maps_x, maps_y = self.controller.moildev[self.image_number].maps_panorama(10, alpha)
        image = draw_polygon(self.model.list_original_image[self.image_number].copy(), maps_x, maps_y)
        self.model.list_original_image_with_fov[self.image_number] = image
        image = draw_point(image, (icx, icy))
        image = draw_point(image, (icx, rho))
        show_image_to_label(self.ui.label_image, image, 800, plusIcon=True)
        self.controller.process_generating_anypoint_image(self.image_number)
        self.show_to_window.show_overlay_and_birds_view()

